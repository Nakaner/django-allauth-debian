From 4586d072694b0d92a0cedafdff7b5c0d4b9ac674 Mon Sep 17 00:00:00 2001
From: Raymond Penners <raymond.penners@intenct.nl>
Date: Wed, 18 Dec 2019 14:09:19 +0100
Subject: [PATCH] fix(account/password-reset): CVE-2019-19844

---
 allauth/account/tests.py | 43 +++++++++++++++++++++++++++++++++++++++-
 allauth/account/utils.py | 22 ++++++++++++++++++--
 2 files changed, 62 insertions(+), 3 deletions(-)

diff --git a/allauth/account/tests.py b/allauth/account/tests.py
index f4e53614..7e582374 100644
--- a/allauth/account/tests.py
+++ b/allauth/account/tests.py
@@ -18,7 +18,7 @@ from django.test.utils import override_settings
 from django.urls import reverse
 from django.utils.timezone import now
 
-from allauth.account.forms import BaseSignupForm, SignupForm
+from allauth.account.forms import BaseSignupForm, ResetPasswordForm, SignupForm
 from allauth.account.models import (
     EmailAddress,
     EmailConfirmation,
@@ -1217,3 +1217,44 @@ class ConfirmationViewTests(TestCase):
                         args=[key]))
 
         assert mock_perform_login.called
+
+
+class TestCVE2019_19844(TestCase):
+
+    global_request = RequestFactory().get('/')
+
+    def test_user_email_unicode_collision(self):
+        User = get_user_model()
+        User.objects.create_user('mike123', 'mike@example.org', 'test123')
+        User.objects.create_user('mike456', 'mıke@example.org', 'test123')
+        data = {'email': 'mıke@example.org'}
+        form = ResetPasswordForm(data)
+        self.assertTrue(form.is_valid())
+        form.save(self.global_request)
+        self.assertEqual(len(mail.outbox), 1)
+        self.assertEqual(mail.outbox[0].to, ['mıke@example.org'])
+
+    def test_user_email_domain_unicode_collision(self):
+        User = get_user_model()
+        User.objects.create_user('mike123', 'mike@ixample.org', 'test123')
+        User.objects.create_user('mike456', 'mike@ıxample.org', 'test123')
+        data = {'email': 'mike@ıxample.org'}
+        form = ResetPasswordForm(data)
+        self.assertTrue(form.is_valid())
+        form.save(self.global_request)
+        self.assertEqual(len(mail.outbox), 1)
+        self.assertEqual(mail.outbox[0].to, ['mike@ıxample.org'])
+
+    def test_user_email_unicode_collision_nonexistent(self):
+        User = get_user_model()
+        User.objects.create_user('mike123', 'mike@example.org', 'test123')
+        data = {'email': 'mıke@example.org'}
+        form = ResetPasswordForm(data)
+        self.assertFalse(form.is_valid())
+
+    def test_user_email_domain_unicode_collision_nonexistent(self):
+        User = get_user_model()
+        User.objects.create_user('mike123', 'mike@ixample.org', 'test123')
+        data = {'email': 'mike@ıxample.org'}
+        form = ResetPasswordForm(data)
+        self.assertFalse(form.is_valid())
diff --git a/allauth/account/utils.py b/allauth/account/utils.py
index 8340d12b..e7410666 100644
--- a/allauth/account/utils.py
+++ b/allauth/account/utils.py
@@ -1,3 +1,4 @@
+import unicodedata
 from collections import OrderedDict
 from datetime import timedelta
 
@@ -25,6 +26,17 @@ from .adapter import get_adapter
 from .app_settings import EmailVerificationMethod
 
 
+def _unicode_ci_compare(s1, s2):
+    """
+    Perform case-insensitive comparison of two identifiers, using the
+    recommended algorithm from Unicode Technical Report 36, section
+    2.11.2(B)(2).
+    """
+    norm_s1 = unicodedata.normalize('NFKC', s1).casefold()
+    norm_s2 = unicodedata.normalize('NFKC', s2).casefold()
+    return norm_s1 == norm_s2
+
+
 def get_next_redirect_url(request, redirect_field_name="next"):
     """
     Returns the next URL to redirect to, if it was explicitly passed
@@ -380,10 +392,16 @@ def filter_users_by_email(email):
     from .models import EmailAddress
     User = get_user_model()
     mails = EmailAddress.objects.filter(email__iexact=email)
-    users = [e.user for e in mails.prefetch_related('user')]
+    users = []
+    for e in mails.prefetch_related('user'):
+        if _unicode_ci_compare(e.email, email):
+            users.append(e.user)
     if app_settings.USER_MODEL_EMAIL_FIELD:
         q_dict = {app_settings.USER_MODEL_EMAIL_FIELD + '__iexact': email}
-        users += list(User.objects.filter(**q_dict))
+        for user in User.objects.filter(**q_dict).iterator():
+            user_email = getattr(user, app_settings.USER_MODEL_EMAIL_FIELD)
+            if _unicode_ci_compare(user_email, email):
+                users.append(user)
     return list(set(users))
 
 
-- 
2.17.1

